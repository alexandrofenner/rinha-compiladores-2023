let err_count = 0;

let b_true = true;
let b_false = false;

let i_0 = 0;
let i_1 = 1;
let i_2 = 2;
let i_3 = 3;
let i_4 = 4;

let chk_true = fn(test_res, test_name)
{
  if (test_res) true;
  err_count = err_count + 1;
  print("o teste: '", test_name, "' falhou!. r: ", test_res);
  false;
};

let chk_false = fn(test_res, test_name)
{
  if (test_res == false) true;
  err_count = err_count + 1;
  print("o teste: '", test_name, "' falhou!. r: ", test_res);
  false;
};

let check_bool = fn()
{
  let _ = chk_true((true == true), "true == true");
  let _ = chk_true((b_true == true), "b_true == true");
  let _ = chk_true((true == b_true), "true == b_true");
  let _ = chk_true((b_true == b_true), "b_true == b_true");
  let _ = chk_true((true > false), "true > false");
  let _ = chk_true((true >= false), "true >= false");
  let _ = chk_true((b_true > false), "b_true > false");
  let _ = chk_true((true > b_false), "true > b_false");
  let _ = chk_true((true >= b_false), "true >= b_false");
  let _ = chk_true((false < true), "false < true");
  let _ = chk_true((false <= true), "false <= true");
  let _ = chk_true((b_false < true), "b_false < true");
  let _ = chk_true((b_false < b_true), "b_false < b_true");

  let _ = chk_true((false == false), "false == false");
  let _ = chk_true((b_false == false), "b_false == false");
  let _ = chk_true((false == b_false), "false == b_false");
  let _ = chk_true((b_false == b_false), "b_false == b_false");
};

let check_int = fn()
{
  let _ = chk_true((0 == 0), "0 == 0");
  let _ = chk_true((i_0 == 0), "i_0 == 0");
  let _ = chk_true((i_1 > i_0), "i_1 > i_0");
  let _ = chk_true((i_0 < i_1), "i_0 < i_1");
  let _ = chk_true((i_1 > 0), "i_1 > 0");
  let _ = chk_false((i_1 > i_2), "i_1 > i_2");
};

let check_str = fn()
{
  let _ = chk_true(("a" == "a"), "'a' == 'a'");
  let _ = chk_true(("a" != "b"), "'a' != 'b'");
  let _ = chk_true(("a" < "b"), "'a' < 'b'");
  let _ = chk_true(("a" <= "b"), "'a' <= 'b'");
  let _ = chk_false(("a" > "b"), "'a' > 'b'");
  let _ = chk_false(("a" >= "b"), "'a' >= 'b'");

  let _ = chk_false(("a" != "a"), "'a' != 'a'");
};

let fib = fn (n) => {
  if (n < 2) {
    n
  } else {
    fib(n - 1) + fib(n - 2)
  }
};

let check_fib = fn()
{
  let _ = chk_true((fib(35) == 9227465), "fib(35) == 9227465");
};

let exf = fn(a)
{
  fn(b) {
    fn(c) {
      fn(d) {
        fn(e) {
          fn(f) {
            "a: " + a + ", b: " + b + ", c: " + c + ", d: " + d + ", e: " + e + ", f: " + f;
          };
        };
      };
    };
  };
};

print(":: inicio dos testes ::");
print();
check_bool();
check_int();
check_str();
check_fib();
chk_true((exf(1)(2)(3)(4)(5)(6) == "a: 1, b: 2, c: 3, d: 4, e: 5, f: 6"), " exf(..) ");

/*let f1 = fn (c) => {
  let e = fn () => {
    "e"
  };
  let f2 = ("a", "b"); 
  fn (d) => { // <- captura "c", "f2" e "e"
    (f2, (c, (d, e() + "fg")))
  }
};
let f3 = f1("c");
print(f3("d")); // <- executa a func anÃ´nima retornada, printa: ((a, b), (c, (d, efg)))

let x = fn(a) => {
  fn(b) => {
    fn(c) => {
      fn(d) => {
        fn(e) => {
          fn(f) => {
            fn(g) => {
              a+b+c+d+e+f+g;
            };
          };
        };
      };
    };
  };
};

let x_a = x(1);
let x_b = x_a(2);
let x_c = x_b(3);
let x_d = x_c(4);
let x_e = x_d(5);
let x_f = x_e(6);
let x_g = x_f(7);

print(x_g);

print("false or false: ", false || false);
print("false or true: ", false || true);
print("true or false: ", true || false);
print("true or true: ", true || true);

print("false and false: ", false && false);
print("false and true: ", false && true);
print("true and false: ", true && false);
print("true and true: ", true && true);


print("10 + 5: ", 10 + 5);
print("10 - 5: ", 10 - 5);
print("10 * 5: ", 10 * 5);
print("10 / 5: ", 10 / 5);
print("11 % 5: ", 11 % 5);

print("10 == 10: ", 10 == 10);
print("10 != 10: ", 10 != 10);
print("10 < 10: ", 10 < 10);
print("10 <= 10: ", 10 <= 10);
print("10 > 10: ", 10 > 10);
print("10 >= 10: ", 10 >= 10);

print("10 == 11: ", 10 == 11);
print("10 != 11: ", 10 != 11);
print("10 < 11: ", 10 < 11);
print("10 <= 11: ", 10 <= 11);
print("10 > 11: ", 10 > 11);
print("10 >= 11: ", 10 >= 11);

print("10 == 9: ", 10 == 9);
print("10 != 9: ", 10 != 9);
print("10 < 9: ", 10 < 9);
print("10 <= 9: ", 10 <= 9);
print("10 > 9: ", 10 > 9);
print("10 >= 9: ", 10 >= 9);

let fib = fn (n) => {
  if (n < 2) {
    n
  } else {
    fib(n - 1) + fib(n - 2)
  }
};

let combination = fn (n, k) => {
    let a = k == 0;
    let b = k == n;
    if (a || b)
    {
        1
    }
    else {
        combination(n - 1, k - 1) + combination(n - 1, k)
    }
};

let sum = fn (n) => {
  if (n == 1) {
    n
  } else {
    n + sum(n - 1)
  }
};

let ackermann = fn(m, n) => {
  if (m == 0) {
    n + 1
  } else {
    if (n == 0) {
      ackermann(m - 1, 1)
    } else {
      ackermann(m - 1, ackermann(m, n - 1));
    }
  }
};

print("classic_fib: ", fib(46));
print("short_fib: ", fn(n){(n<2)?n:~(n-1)+~(n-2)}(46));
print("");
print("classic_comb: ", combination(10,2));
print("short_comb: ", fn(n,k){((k==0)||(k==n))?1:~(n-1,k-1)+~(n-1,k)}(10,2));
print("");
print("classic_sum: ", sum(5));
print("short_sum: ", fn(n){(n==1)?n:n+~(n-1)}(5));
print("");
print("classic_ackr: ", ackermann(3, 11));
print("short_ackr: ", fn(m,n){(m==0)?n+1:{(n==0)?~(m-1,1):~(m-1,~(m,n-1))}}(3,11));
print("");
*/
